import tkinter as tk
from tkinter import messagebox
import copy

class OthelloGame:
    BOARD_SIZE = 8
    EMPTY = '-'
    PLAYER_X = 'X'
    PLAYER_O = 'O'

    def __init__(self):
        self.board = [[self.EMPTY] * self.BOARD_SIZE for _ in range(self.BOARD_SIZE)]
        self.initialize_board()

    def initialize_board(self):
        mid = self.BOARD_SIZE // 2
        self.board[mid - 1][mid - 1] = self.PLAYER_X
        self.board[mid][mid] = self.PLAYER_X
        self.board[mid - 1][mid] = self.PLAYER_O
        self.board[mid][mid - 1] = self.PLAYER_O

    def is_valid_move(self, row, col, player):
        if row < 0 or row >= self.BOARD_SIZE or col < 0 or col >= self.BOARD_SIZE or self.board[row][col] != self.EMPTY:
            return False
        
        opponent = self.PLAYER_O if player == self.PLAYER_X else self.PLAYER_X
        directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]

        for dr, dc in directions:
            r, c = row + dr, col + dc
            found_opponent = False

            while 0 <= r < self.BOARD_SIZE and 0 <= c < self.BOARD_SIZE and self.board[r][c] == opponent:
                r += dr
                c += dc
                found_opponent = True

            if found_opponent and 0 <= r < self.BOARD_SIZE and 0 <= c < self.BOARD_SIZE and self.board[r][c] == player:
                return True
        return False

    def get_valid_moves(self, player):
        return [(r, c) for r in range(self.BOARD_SIZE) for c in range(self.BOARD_SIZE) if self.is_valid_move(r, c, player)]

    def apply_move(self, row, col, player):
        if not self.is_valid_move(row, col, player):
            return False

        self.board[row][col] = player
        opponent = self.PLAYER_O if player == self.PLAYER_X else self.PLAYER_X
        directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]

        for dr, dc in directions:
            r, c = row + dr, col + dc
            flipped = []

            while 0 <= r < self.BOARD_SIZE and 0 <= c < self.BOARD_SIZE and self.board[r][c] == opponent:
                flipped.append((r, c))
                r += dr
                c += dc

            if flipped and 0 <= r < self.BOARD_SIZE and 0 <= c < self.BOARD_SIZE and self.board[r][c] == player:
                for fr, fc in flipped:
                    self.board[fr][fc] = player
        return True

    def is_game_over(self):
        return not self.get_valid_moves(self.PLAYER_X) and not self.get_valid_moves(self.PLAYER_O)

    def get_winner(self):
        x_count = sum(row.count(self.PLAYER_X) for row in self.board)
        o_count = sum(row.count(self.PLAYER_O) for row in self.board)
        return "User Wins!" if x_count > o_count else "AI Wins!" if x_count < o_count else "It's a Tie!"

class AIPlayer:
    def __init__(self, player):
        self.player = player

    def get_best_move(self, game):
        valid_moves = game.get_valid_moves(self.player)
        return max(valid_moves, key=lambda move: self.evaluate_move(game, move), default=None)

    def evaluate_move(self, game, move):
        temp_game = copy.deepcopy(game)
        temp_game.apply_move(move[0], move[1], self.player)
        return sum(row.count(self.player) for row in temp_game.board)

class OthelloGUI:
    def __init__(self, root):
        self.game = OthelloGame()
        self.current_player = OthelloGame.PLAYER_X
        self.ai = AIPlayer(OthelloGame.PLAYER_O)

        self.root = root
        self.root.title("Othello Game")
        self.board_buttons = [[None] * OthelloGame.BOARD_SIZE for _ in range(OthelloGame.BOARD_SIZE)]
        
        self.create_widgets()
        self.update_board_gui()

    def create_widgets(self):
        self.board_frame = tk.Frame(self.root)
        self.board_frame.pack()

        for i in range(OthelloGame.BOARD_SIZE):
            for j in range(OthelloGame.BOARD_SIZE):
                button = tk.Button(self.board_frame, width=4, height=2, bg="green", command=lambda row=i, col=j: self.handle_move(row, col))
                button.grid(row=i, column=j, padx=2, pady=2)
                self.board_buttons[i][j] = button

        self.new_game_button = tk.Button(self.root, text="New Game", command=self.reset_game)
        self.new_game_button.pack()

    def handle_move(self, row, col):
        if not self.game.is_valid_move(row, col, self.current_player):
            messagebox.showerror("Invalid Move", "This move is not valid. Try again.")
            return

        self.game.apply_move(row, col, self.current_player)
        self.update_board_gui()

        if self.game.is_game_over():
            messagebox.showinfo("Game Over", self.game.get_winner())
            return

        self.switch_player()

    def switch_player(self):
        if self.current_player == OthelloGame.PLAYER_X:
            self.current_player = OthelloGame.PLAYER_O
            self.root.after(500, self.ai_turn)
        else:
            self.current_player = OthelloGame.PLAYER_X
            if not self.game.get_valid_moves(self.current_player):
                if not self.game.get_valid_moves(OthelloGame.PLAYER_O):
                    messagebox.showinfo("Game Over", self.game.get_winner())
                else:
                    messagebox.showinfo("Turn Skipped", "No valid moves for Player X.")
                    self.switch_player()
            self.update_board_gui()

    def ai_turn(self):
        best_move = self.ai.get_best_move(self.game)
        if best_move:
            self.game.apply_move(best_move[0], best_move[1], self.current_player)
        self.update_board_gui()

        if self.game.is_game_over():
            messagebox.showinfo("Game Over", self.game.get_winner())
            return

        self.switch_player()

    def update_board_gui(self):
        for i in range(OthelloGame.BOARD_SIZE):
            for j in range(OthelloGame.BOARD_SIZE):
                color = "green"
                if self.game.board[i][j] == OthelloGame.PLAYER_X:
                    color = "black"
                elif self.game.board[i][j] == OthelloGame.PLAYER_O:
                    color = "white"

                self.board_buttons[i][j].config(bg=color, state="normal" if self.game.is_valid_move(i, j, self.current_player) else "disabled")

    def reset_game(self):
        self.game = OthelloGame()
        self.current_player = OthelloGame.PLAYER_X
        self.update_board_gui()

if __name__ == "__main__":
    root = tk.Tk()
    app = OthelloGUI(root)
    root.mainloop()
